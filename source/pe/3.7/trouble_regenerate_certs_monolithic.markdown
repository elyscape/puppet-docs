---
layout: default
title: "PE 3.7.1 » Security and SSL » Cert Regeneration: Monolithic Deployments"
subtitle: "Regenerating Certs and Security Credentials in Monolithic Puppet Enterprise Deployments"
canonical: "/pe/latest/trouble_regenerate_certs_monolithic.html"
description: "This page explains how to regenerate all SSL certificates in monolithic Puppet Enterprise deployments."
---

> **Warning**: Do not perform these cert regeneration steps if you have upgraded to PE 3.7.x and not yet [classified the new PE groups](./install_upgrading_notes.html#classifying-pe-groups). You can perform these cert regen steps after classifying those groups.

> **Note**: This page explains how to regenerate all certificates in **a monolithic PE deployment** --- that is, where the Puppet master, PuppetDB, and PE console components are all installed on the same server. [See this page for instructions on regenerating certificates in a **split PE deployment**](./trouble_regenerate_certs_split.html).

## Overview

In some cases, you may find that you need to regenerate the certificates and security credentials (private and public keys)  generated by PE's built-in certificate authority (CA). For example, you may have a Puppet master that you need to move to a different network in your infrastructure, or you may find that you need to regenerate all the certificates and security credentials in your infrastructure due to an unforeseen security vulnerability.

Regardless of your situation, regenerating your certificates involves the following major steps (complete procedures follow below):

1. Shut down all PE-related services.
2. Delete and recreate the CA and generate the certificates and security credentials needed for PE to resume basic operation.
3. Clear and replace certs and security credentials for PuppetDB.
4. Clear and replace certs and security credentials for the PE console.
5. Restart all PE-related services.
6. Clear and replace certs and security credentials for all agent nodes.


Note that this process **destroys the certificate authority and all other certificates.** It is meant for use in the event of a total compromise of your site, or some other unusual circumstance. If you just need to replace a few agent certificates, you can use the `puppet cert clean` command on your Puppet master and then follow step five for any agent certs that need to be replaced.

>**Important Notes and Warnings**
>
>- In the following instructions, when `<CERTNAME>` is used, it refers to the Puppet agent's certname. To find this value, run `puppet config print certname` before starting.
>
> - You must be logged in as a root, (or in the case of Windows agents, as an account with Administrator Privileges) to make these changes.
>
> - If you encounter any errors during steps that involve `service stop/start`, `rm`, `cp`, or `chmod` commands, you should diagnose these before continuing, as the success each step is very important to the success of the next step.


## Step 1: Shut down all PE-related services

     puppet resource service pe-puppet ensure=stopped
     puppet resource service pe-puppetserver ensure=stopped
     puppet resource service pe-activemq ensure=stopped
     puppet resource service pe-mcollective ensure=stopped
     puppet resource service pe-puppetdb ensure=stopped
     puppet resource service pe-postgresql ensure=stopped
     puppet resource service pe-console-services ensure=stopped
     puppet resource service pe-httpd ensure=stopped

## Step 2: Delete and recreate the CA

**On your monolithic Puppet master server**:

1. Back up the following directories.

   * `/etc/puppetlabs/puppet/ssl/`

   * `/etc/puppetlabs/puppetdb/ssl/`

   * `/opt/puppet/share/console-services/certs/`

   * `/opt/puppet/share/puppet-dashboard/certs/`

   * `/opt/puppet/var/lib/pgsql/9.2/data/certs/`

   If something goes wrong, you may need to restore these directories so your deployment can stay functional. **However,** if you needed to regenerate your certs for security reasons and couldn't, you should contact Puppet Labs support as soon as you restore service so we can help you secure your site.

2. Delete the CA and clear all certs from your master.

   `rm -rf /etc/puppetlabs/puppet/ssl/*`

3. Remove the cached catalog.

   `rm -f /var/opt/lib/pe-puppet/client_data/catalog/<CERTNAME>.json`

4. Regenerate the CA.

   `puppet cert list -a`

   You should see this message: `Notice: Signed certificate request for ca`

5. Generate the Puppet master's new certs.

   `puppet cert generate <CERTNAME> --dns_alt_names=<DNS_ALT_NAMES>`

   >**Note**: Be sure to specify any dns alt names you have. You can find the list of your current dns alt names with `puppet config print dns_alt_names`. By default, PE uses `puppet` and `puppet.domain`.

6. Create the certificates for PE-related services.

        puppet cert generate pe-internal-classifier
        puppet cert generate pe-internal-dashboard
        puppet cert generate pe-internal-mcollective-servers
        puppet cert generate pe-internal-peadmin-mcollective-client
        puppet cert generate pe-internal-puppet-console-mcollective-client

7. Copy the CA's certificate revocation list (CRL) into place.

        cp /etc/puppetlabs/puppet/ssl/ca/ca_crl.pem /etc/puppetlabs/puppet/ssl/crl.pem
        chown -R pe-puppet:pe-puppet /etc/puppetlabs/puppet/ssl


## Step 3: Clear and Regenerate Certs for PuppetDB

**On your monolithic Puppet master server**:

1. Clear the certs and security credentials from the PuppetDB SSL directory.

   `rm -rf /etc/puppetlabs/puppetdb/ssl/*`

2. Copy the certs and security credentials generated in step 2.5 for the Puppet master node to the PuppetDB SSL directory.

   Note that the Puppet master, PuppetDB, and PE console share the same agent cert and security credentials.

        cp /etc/puppetlabs/puppet/ssl/certs/<CERTNAME>.pem /etc/puppetlabs/puppetdb/ssl/<CERTNAME>.cert.pem
        cp /etc/puppetlabs/puppet/ssl/public_keys/<CERTNAME>.pem /etc/puppetlabs/puppetdb/ssl/<CERTNAME>.public_key.pem
        cp /etc/puppetlabs/puppet/ssl/private_keys/<CERTNAME>.pem /etc/puppetlabs/puppetdb/ssl/<CERTNAME>.private_key.pem
        chown -R pe-puppetdb:pe-puppetdb /etc/puppetlabs/puppetdb/ssl

3. Clear the certs and security credentials from the PostgreSQL certs directory.

   `rm -rf /opt/puppet/var/lib/pgsql/9.2/data/certs/*`

4. Copy the Puppet agent's certs and security credentials generated in step 2.5 for the Puppet master to the PostgreSQL certs directory.

        cp /etc/puppetlabs/puppet/ssl/certs/<CERTNAME>.pem /opt/puppet/var/lib/pgsql/9.2/data/certs/<CERTNAME>.cert.pem
        cp /etc/puppetlabs/puppet/ssl/public_keys/<CERTNAME>.pem /opt/puppet/var/lib/pgsql/9.2/data/certs/<CERTNAME>.public_key.pem
        cp /etc/puppetlabs/puppet/ssl/private_keys/<CERTNAME>.pem /opt/puppet/var/lib/pgsql/9.2/data/certs/<CERTNAME>.private_key.pem
        chmod 400 /opt/puppet/var/lib/pgsql/9.2/data/certs/*
        chown pe-postgres:pe-postgres /opt/puppet/var/lib/pgsql/9.2/data/certs/*

## Step 4:  Clear and Regenerate Certs for the PE Console

**On your monolithic Puppet master server**:

1. Remove all credentials in the puppet-dashboard and console-services certificate directories.

        rm -rf /opt/puppet/share/puppet-dashboard/certs/*
        rm -rf /opt/puppet/share/console-services/certs/*

2. Copy pe-internal-classifier cert and security credentials to the console-services cert directory.

        cp /etc/puppetlabs/puppet/ssl/certs/pe-internal-classifier.pem /opt/puppet/share/console-services/certs/pe-internal-classifier.cert.pem
        cp /etc/puppetlabs/puppet/ssl/public_keys/pe-internal-classifier.pem /opt/puppet/share/console-services/certs/pe-internal-classifier.public_key.pem
        cp /etc/puppetlabs/puppet/ssl/private_keys/pe-internal-classifier.pem /opt/puppet/share/console-services/certs/pe-internal-classifier.private_key.pem

3. Copy the Puppet agent's cert and security credentials to the console-services cert directory.

        cp /etc/puppetlabs/puppet/ssl/certs/<CERTNAME>.pem /opt/puppet/share/console-services/certs/<CERTNAME>.cert.pem
        cp /etc/puppetlabs/puppet/ssl/public_keys/<CERTNAME>.pem /opt/puppet/share/console-services/certs/<CERTNAME>.public_key.pem
        cp /etc/puppetlabs/puppet/ssl/private_keys/<CERTNAME>.pem /opt/puppet/share/console-services/certs/<CERTNAME>.private_key.pem

4. Copy the pe-internal-dashboard cert and security credentials to the console-services cert directory.

        cp /etc/puppetlabs/puppet/ssl/certs/pe-internal-dashboard.pem /opt/puppet/share/console-services/certs/pe-internal-dashboard.cert.pem
        cp /etc/puppetlabs/puppet/ssl/public_keys/pe-internal-dashboard.pem /opt/puppet/share/console-services/certs/pe-internal-dashboard.public_key.pem
        cp /etc/puppetlabs/puppet/ssl/private_keys/pe-internal-dashboard.pem /opt/puppet/share/console-services/certs/pe-internal-dashboard.private_key.pem

5. Ensure the console can access the new credentials.

        chown -R pe-console-services:pe-console-services /opt/puppet/share/console-services/certs

6. Copy the Puppet agent's cert and security credentials to the puppet-dashboard cert directory.

   Note that the Puppet master, PuppetDB, and PE console share the same agent cert and security credentials.

         cp /etc/puppetlabs/puppet/ssl/certs/<CERTNAME>.pem /opt/puppet/share/puppet-dashboard/certs/<CERTNAME>.cert.pem
         cp /etc/puppetlabs/puppet/ssl/public_keys/<CERTNAME>.pem /opt/puppet/share/puppet-dashboard/certs/<CERTNAME>.public_key.pem
         cp /etc/puppetlabs/puppet/ssl/private_keys/<CERTNAME>.pem /opt/puppet/share/puppet-dashboard/certs/<CERTNAME>.private_key.pem

7. Copy the pe-internal-dashboard cert and security credentials to the puppet-dashboard cert directory.

         cp /etc/puppetlabs/puppet/ssl/certs/pe-internal-dashboard.pem /opt/puppet/share/puppet-dashboard/certs/pe-internal-dashboard.cert.pem
         cp /etc/puppetlabs/puppet/ssl/public_keys/pe-internal-dashboard.pem /opt/puppet/share/puppet-dashboard/certs/pe-internal-dashboard.public_key.pem
         cp /etc/puppetlabs/puppet/ssl/private_keys/pe-internal-dashboard.pem /opt/puppet/share/puppet-dashboard/certs/pe-internal-dashboard.private_key.pem

8. Ensure the console can access the new credentials.

        chown -R puppet-dashboard:puppet-dashboard /opt/puppet/share/puppet-dashboard/certs

##  Step 5: Restart PE Services

Now that all the certs are in place, you will need to restart the PE services you stopped.

      puppet resource service pe-puppetserver ensure=running
      puppet resource service pe-postgresql ensure=running
      puppet resource service pe-puppetdb ensure=running
      puppet resource service pe-console-services ensure=running
      puppet resource service pe-httpd ensure=running
      puppet resource service pe-activemq ensure=running
      puppet resource service pe-mcollective ensure=running
      puppet resource service pe-puppet ensure=running

Kick off a Puppet run. A successful Puppet run on the master is necessary to ensure that the PE orchestration service and ActiveMQ is configured properly.

## Step 6: Clear and Regenerate Certs for PE Agents

[agent_certs]: #step-5-clear-and-regenerate-certs-for-pe-agents


To replace the certs on agents, you'll need to log into each agent node and do the following:

1. Back up the `/etc/puppetlabs/puppet/ssl/` directory.

   If something goes wrong, you may need to restore these directories so your deployment can stay functional. **However,** if you needed to regenerate your certs for security reasons and couldn't, you should contact Puppet Labs support as soon as you restore service so we can help you secure your site.

2. Stop the Puppet agent service.

   `puppet resource service pe-puppet ensure=stopped`

3. Stop the orchestration service.

   `puppet resource service pe-mcollective ensure=stopped`

4. Delete the agent's SSL directory. On \*nix nodes, run `rm -rf /etc/puppetlabs/puppet/ssl`. On Windows nodes, delete the `$confdir\ssl` directory, using the Administrator confdir. [See here for more information on locating the confdir.][confdir]
5. Remove the cached catalog. on \*nix nodes, run `rm -f /var/opt/lib/pe-puppet/client_data/catalog/<CERT NAME>.json`. On Windows nodes, delete the `$client_datadir\catalog\<CERTNAME>.json` file, using the Administrator confdir. [See here for more information on locating the confdir.][confdir]

6. Re-start the Puppet agent service.

   `puppet resource service pe-puppet ensure=running`

   Once Puppet agent starts, it will automatically generate keys and request a new certificate from the CA Puppet master.

7. If you are not using autosigning, you will need to sign each agent node's certificate request. You can do this [with the PE console's request manager][request_manager], or by logging into the CA Puppet master server, running `puppet cert list` to see pending requests, and running `puppet cert sign <NAME>` to sign requests.

Once an agent node's new certificate is signed, it will fetch it automatically within a few minutes and begin a Puppet run. After a node has fetched its new certificate and completed a full Puppet run, it will once again appear in orchestration and live management. If, after waiting for a short time, you don't see the agent node in live management, use NTP to make sure time is in sync across your PE deployment. On Windows nodes, you may need to log into the node and check the status of the Marionette Collective service --- sometimes it can hang while attempting to stop or restart.

> Once you have regenerated all agents' certificates, **everything should now be back to normal and fully functional under the new CA**.

[confdir]: /puppet/3.6/reference/dirs_confdir.html#windows-systems
[request_manager]: ./console_cert_mgmt.html
